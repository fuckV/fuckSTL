#pragma once
namespace alpaca
{
	struct two{ char x[2]; };

	namespace _Base_Logic{
		template<bool, class _T1, class _T2>
		struct _If{ typedef _T2 type; };
		template<class _T1, class _T2>
		struct _If<true, _T1, _T2>{ typedef _T1 type; };
	}

	//type_identity
	template<class _T>
	struct type_identity{ typedef _T type; };

	//integral_constant
	template<class _T, _T v>
	struct integral_constant
	{
		static const _T value = v;

		typedef _T value_type;
		typedef integral_constant<_T, v> type;

		operator value_type() const
		{
			return (value);
		}
	};

	typedef integral_constant<bool, true> true_type;
	typedef integral_constant<bool, false> false_type;

	//类型谓词
	template<bool>
	struct bool_constant : false_type{};
	template<>
	struct bool_constant<true> : true_type{};

	//remove_const
	template<class _T>
	struct remove_const{ typedef _T type; };
	template<class _T>
	struct remove_const<const _T>{ typedef _T type; };
	template<class _T>
	struct remove_const<const _T[]>{ typedef _T type[]; };
	template<class _T, unsigned int _N>
	struct remove_const<const _T[_N]>{ typedef _T type[_N]; };

	//add_const
	template<class _T>
	struct add_const{ typedef const _T type; };

	//remove_volatile
	template<class _T>
	struct remove_volatile{ typedef _T type; };
	template<class _T>
	struct remove_volatile<volatile _T>{ typedef _T type; };
	template<class _T>
	struct remove_volatile<volatile _T[]>{ typedef _T type[]; };
	template<class _T, unsigned int _N>
	struct remove_volatile<volatile _T[_N]>{ typedef _T type[_N]; };

	//add_volatile
	template<class _T>
	struct add_volatile{ typedef volatile _T type; };

	//remove_cv
	template<class _T>
	struct remove_cv{ typedef typename remove_const<typename remove_volatile<_T>::type>::type type; };

	//add_cv
	template<class _T>
	struct add_cv{ typedef const volatile _T type; };

	//remove_reference
	template<class _T>
	struct remove_reference{ typedef _T type; };
	template<class _T>
	struct remove_reference<_T&>{ typedef _T type; };
	template<class _T>
	struct remove_reference<_T&&>{ typedef _T type; };

	//add_reference_imp
	namespace _Add_reference_imp{
		template<class _T>
		struct _Add_lvalue_reference{ typedef _T& type; };
		template<>
		struct _Add_lvalue_reference<void> { typedef void type; };
		template<class _T>
		struct _Add_rvalue_reference{ typedef _T&& type; };
		template<>
		struct _Add_rvalue_reference < void > { typedef void type; };
	}
	//add_lvalue_reference
	template<class _T>
	struct add_lvalue_reference{ typedef typename _Add_reference_imp::_Add_lvalue_reference<_T>::type type; };
	//add_rvalue_reference
	template<class _T>
	struct add_rvalue_reference{ typedef typename _Add_reference_imp::_Add_rvalue_reference<_T>::type type; };

	//remove_pointer
	template<class _T>
	struct remove_pointer{ typedef _T type; };
	template<class _T>
	struct remove_pointer<_T*>{ typedef _T type; };
	template<class _T>
	struct remove_pointer<_T* const>{ typedef _T type; };
	template<class _T>
	struct remove_pointer<_T* volatile>{ typedef _T type; };
	template<class _T>
	struct remove_pointer<_T* const volatile>{ typedef _T type; };

	//add_pointer
	template<class _T>
	struct add_pointer{ typedef typename remove_reference<_T>::type *type; };

	//remove_extent
	template<class _T>
	struct remove_extent{ typedef _T type; };
	template<class _T>
	struct remove_extent<_T[]>{ typedef _T type; };
	template<class _T, unsigned _N>
	struct remove_extent<_T[_N]> { typedef _T type; };

	//remove_all_extents
	template<class _T>
	struct remove_all_extents{ typedef _T type; };
	template<class _T>
	struct remove_all_extents<_T[]>{ typedef typename remove_all_extents<_T>::type type; };
	template<class _T, unsigned int _N>
	struct remove_all_extents<_T[_N]>{ typedef typename remove_all_extents<_T>::type type; };

	//is_integral
	namespace _Is_integral_imp{
		template<class>
		struct _Is_integral : public false_type{};
		template<>
		struct _Is_integral<bool> : public true_type{};
		template<>
		struct _Is_integral<char> : public true_type{};
		template<>
		struct _Is_integral<signed char> : public true_type{};
		template<>
		struct _Is_integral<unsigned char> : public true_type{};
		template<>
		struct _Is_integral<short> : public true_type{};
		template<>
		struct _Is_integral<unsigned short> : public true_type{};
		template<>
		struct _Is_integral<int> : public true_type{};
		template<>
		struct _Is_integral<unsigned int> : public true_type{};
		template<>
		struct _Is_integral<long> : public true_type{};
		template<>
		struct _Is_integral<unsigned long> : public true_type{};
		template<>
		struct _Is_integral<long long> : public true_type{};
		template<>
		struct _Is_integral<unsigned long long> : public true_type{};
		template<>
		struct _Is_integral<wchar_t> : public true_type{};
	}
	template<class _T>
	struct is_intergral : public _Is_integral_imp::_Is_integral<typename remove_cv<_T>::type> {};

	//is_floating_point
	namespace _Is_floating_point_imp{
		template<class _T>
		struct _Is_floating_point : public false_type{};
		template<>
		struct _Is_floating_point<double> : public true_type{};
		template<>
		struct _Is_floating_point<float> : public true_type{};
		template<>
		struct _Is_floating_point<long double> : public true_type{};
	}
	template<class _T>
	struct is_floating_point : public _Is_floating_point_imp::_Is_floating_point<typename remove_cv<_T>::type>{};

	//is_const
	template<class>
	struct is_const : public false_type{};
	template<class _T>
	struct is_const<const _T> : public true_type{};

	//is_volatile
	template<class>
	struct is_volatile : public false_type{};
	template<class _T>
	struct is_volatile<volatile _T> : public true_type{};

	//is_array
	template<class>
	struct is_array : public false_type {};
	template<class _T>
	struct is_array<_T[]> : public true_type{};
	template<class _T, unsigned int N>
	struct is_array<_T[N]> :public true_type{};


	//is_same
	template<class _T, class U>
	struct is_same : public false_type{};
	template<class _T>
	struct is_same<_T, _T> : public true_type{};

	//make_signed/unsigned
#ifdef FAST_IMP
	//未支持wchar_t,char
	template<class _T> struct make_signed { typedef _T type; };
	template<> struct make_signed <unsigned char> { typedef signed char type; };
	template<> struct make_signed <const unsigned char> { typedef const signed char type; };
	template<> struct make_signed <volatile unsigned char> { typedef volatile signed char type; };
	template<> struct make_signed <const volatile unsigned char> { typedef const volatile signed char type; };
	template<> struct make_signed <unsigned short> { typedef signed short type; };
	template<> struct make_signed <const unsigned short> { typedef const signed short type; };
	template<> struct make_signed <volatile unsigned short> { typedef volatile signed short type; };
	template<> struct make_signed <const volatile unsigned short> { typedef const volatile signed short type; };
	template<> struct make_signed <unsigned int> { typedef signed int type; };
	template<> struct make_signed <const unsigned int> { typedef const signed int type; };
	template<> struct make_signed <volatile unsigned int> { typedef volatile signed int type; };
	template<> struct make_signed <const volatile unsigned int> { typedef const volatile signed int type; };
	template<> struct make_signed <unsigned long> { typedef signed long type; };
	template<> struct make_signed <const unsigned long> { typedef const signed long type; };
	template<> struct make_signed <volatile unsigned long> { typedef volatile signed long type; };
	template<> struct make_signed <const volatile unsigned long> { typedef const volatile signed long type; };
	template<> struct make_signed <unsigned long long> { typedef signed long long type; };
	template<> struct make_signed <const unsigned long long> { typedef const signed long long type; };
	template<> struct make_signed <volatile unsigned long long> { typedef volatile signed long long type; };
	template<> struct make_signed <const volatile unsigned long long> { typedef const volatile signed long long type; };
	template<class _T> struct make_unsigned { typedef _T type; };
	template<> struct make_unsigned <signed char> { typedef unsigned char type; };
	template<> struct make_unsigned <const signed char> { typedef const unsigned char type; };
	template<> struct make_unsigned <volatile signed char> { typedef volatile unsigned char type; };
	template<> struct make_unsigned <const volatile signed char> { typedef const volatile unsigned char type; };
	template<> struct make_unsigned <signed short> { typedef unsigned short type; };
	template<> struct make_unsigned <const signed short> { typedef const unsigned short type; };
	template<> struct make_unsigned <volatile signed short> { typedef volatile unsigned short type; };
	template<> struct make_unsigned <const volatile signed short> { typedef const volatile unsigned short type; };
	template<> struct make_unsigned <signed int> { typedef unsigned int type; };
	template<> struct make_unsigned <const signed int> { typedef const unsigned int type; };
	template<> struct make_unsigned <volatile signed int> { typedef volatile unsigned int type; };
	template<> struct make_unsigned <const volatile signed int> { typedef const volatile unsigned int type; };
	template<> struct make_unsigned <signed long> { typedef unsigned long type; };
	template<> struct make_unsigned <const signed long> { typedef const unsigned long type; };
	template<> struct make_unsigned <volatile signed long> { typedef volatile unsigned long type; };
	template<> struct make_unsigned <const volatile signed long> { typedef const volatile unsigned long type; };
	template<> struct make_unsigned <signed long long> { typedef unsigned long long type; };
	template<> struct make_unsigned <const signed long long> { typedef const unsigned long long type; };
	template<> struct make_unsigned <volatile signed long long> { typedef volatile unsigned long long type; };
	template<> struct make_unsigned <const volatile signed long long> { typedef const volatile unsigned long long type; };
#else
	namespace _Change_sign_imp{
		template<class _T>
		struct _Change_sign{
			// Tips:type enum if-ret{elsif-ret{elseif-ret{elseif...{else-ret :)
			typedef
				typename _Base_Logic::_If<is_same<_T, unsigned char>::value || is_same<_T, signed char>::value, signed char,
				typename _Base_Logic::_If<is_same<_T, unsigned short>::value || is_same<_T, short>::value, short,
				typename _Base_Logic::_If<is_same<_T, unsigned int>::value || is_same<_T, int>::value, int,
				typename _Base_Logic::_If<is_same<_T, unsigned long>::value || is_same<_T, long>::value, long,
				typename _Base_Logic::_If<is_same<_T, unsigned long long>::value || is_same<_T, long long>::value, long long,
				typename _Base_Logic::_If<(sizeof(_T) == sizeof(signed char)), signed char,
				typename _Base_Logic::_If<(sizeof(_T) == sizeof(short)), short,
				typename _Base_Logic::_If<(sizeof(_T) == sizeof(int)), int,
				typename _Base_Logic::_If<(sizeof(_T) == sizeof(long)), long, long long
				>::type
				>::type
				>::type
				>::type
				>::type
				>::type
				>::type
				>::type
				>::type _Signed;
			typedef
				typename _Base_Logic::_If<is_same<_Signed, signed char>::value, unsigned char,
				typename _Base_Logic::_If<is_same<_Signed, signed short>::value, unsigned short,
				typename _Base_Logic::_If<is_same<_Signed, signed int>::value, unsigned int,
				typename _Base_Logic::_If<is_same<_Signed, signed long>::value, unsigned long, unsigned long long
				>::type
				>::type
				>::type
				>::type _Unsigned;
		};
		//cv type
		template<class _T>
		struct _Change_sign<const _T>
		{
			typedef const typename _Change_sign<_T>::_Signed _Signed;
			typedef const typename _Change_sign<_T>::_Unsigned _Unsigned;
		};
		template<class _T>
		struct _Change_sign<volatile _T>
		{
			typedef volatile typename _Change_sign<_T>::_Signed _Signed;
			typedef volatile typename _Change_sign<_T>::_Unsigned _Unsigned;
		};
		template<class _T>
		struct _Change_sign<const volatile _T>
		{
			typedef const volatile typename _Change_sign<_T>::_Signed _Signed;
			typedef const volatile typename _Change_sign<_T>::_Unsigned _Unsigned;
		};
	}
	template<class _T>
	struct make_signed{ typedef typename _Change_sign_imp::_Change_sign<_T>::_Signed type; };
	template<class _T>
	struct make_unsigned{ typedef typename _Change_sign_imp::_Change_sign<_T>::_Unsigned type; };
#endif

	//conjunction
	namespace _Conjunction_imp{
		//捕获序列捕获到false即为false，模板递归结束，未捕获到说明序列全为true，捕获最后一个元素
		//false || last
		template<bool, class First, class... Rest>
		struct _Conjunction{ typedef First type; };
		//frist == true size>=2
		template<class First, class Next, class... Rest>
		struct _Conjunction<true, First, Next, Rest...>
		{
			typedef typename _Conjunction<Next::value, Next, Rest...>::type type;
		};
	}
	template<class Frist, class...Rest>
	struct conjunction : public _Conjunction_imp::_Conjunction<Frist::value, Frist, Rest...>::type{};

	//disjunction
	namespace _Disjunction_imp{
		//捕获序列捕获到true即为true，模板递归结束，未捕获到说明序列全为false，捕获最后一个元素
		// true || last
		template<bool, class First, class... Rest>
		struct _Disjunction{ typedef First type; };
		// frist == false size>=2
		template<class First, class Next, class...Rest>
		struct _Disjunction <false, First, Next, Rest...>
		{
			typedef typename _Disjunction<Next::value, Next, Rest...>::type type;
		};
	}
	template<class First, class... Rest>
	struct disjunction : public _Disjunction_imp::_Disjunction<First::value, First, Rest...>::type{};

	//negation
	template<class _T>
	struct negation : bool_constant<!bool(_T::value)> { };

	//is_void
	namespace _Is_void_imp
	{
		template<class _T>
		struct _Is_void : public false_type{};
		template<>
		struct _Is_void<void> : public true_type{};
	}
	template<class _T>
	struct is_void : public _Is_void_imp::_Is_void<typename remove_cv<_T>::type>{};

	//is_union
#ifdef _MSC_VER
	template<class _T>
	struct is_union : public bool_constant<__is_union(_T)> {};
#else
	namespace _Is_union_imp{
		template<class _T>
		struct _Is_union : public false_type{};
	}
	template<class _T>
	struct is_union : public _Is_union_imp::_Is_union<typename remove_cv<_T>::type>{};
#endif
}